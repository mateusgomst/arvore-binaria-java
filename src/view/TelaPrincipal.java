/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import EstruturaDeDados.ArvoreBinaria;
import java.io.IOException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Alunos;
import model.CarregarAlunos;

/**
 *
 * @author mateusgomes
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form TelaPrincipal
     */
    List<Alunos> listaAlunos;
    
    public TelaPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonIncluir = new javax.swing.JButton();
        jComboBoxListar = new javax.swing.JComboBox<>();
        jButtonBuscar = new javax.swing.JButton();
        jButtonListar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAlunos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonIncluir.setText("INCLUIR");
        jButtonIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIncluirActionPerformed(evt);
            }
        });

        jComboBoxListar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Crescente - nome", "Decrescente - nome", "Crescente - matricula", "Decrescente - matricula" }));
        jComboBoxListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxListarActionPerformed(evt);
            }
        });

        jButtonBuscar.setText("BUSCAR");
        jButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarActionPerformed(evt);
            }
        });

        jButtonListar.setText("LISTAR");
        jButtonListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListarActionPerformed(evt);
            }
        });

        jButton1.setText("CARREGAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTableAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "MATRICULA", "NOME", "TURNO", "PERIODO", "ENFASE", "CURSO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableAlunos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jButtonIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxListar, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonListar, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonIncluir, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(jComboBoxListar)
                    .addComponent(jButtonBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonListar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            
            listaAlunos = CarregarAlunos.carregarAlunos("/Users/mateusgomes/Downloads/DadosDosAlunos.csv");

            if(listaAlunos != null){
                JOptionPane.showMessageDialog(this, "Arquivo Carregado!");
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Erro ao ler o arquivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro no formato dos dados: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxListarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxListarActionPerformed

    private void jButtonListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListarActionPerformed
        try {
            if(listaAlunos == null){
                throw new IllegalStateException("LISTA NÃO FOI CARREGADA!"); // Lança uma exceção
            }
            String opcao = (String)jComboBoxListar.getSelectedItem();
            List<Alunos> alunosOrdenados;
            DefaultTableModel modeloTabela = (DefaultTableModel) jTableAlunos.getModel();
            modeloTabela.setRowCount(0);


            switch (opcao) {
                case "Crescente - nome" -> {

                    ArvoreBinaria arvoreAlunos = new ArvoreBinaria();

                    for (Alunos aluno : listaAlunos) {
                        try {
                            arvoreAlunos.incluir(aluno.getNome(), aluno); 
                        } catch (Exception e) {
                             JOptionPane.showMessageDialog(this, "Erro ao incluir aluno: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    //obtenho uma list, com os alunos ordenados em ordem crescente com chave NOME
                    alunosOrdenados = arvoreAlunos.obterAlunosOrdemCrescente(arvoreAlunos.getRaiz());


                    modeloTabela.setRowCount(0); 

                    for (Alunos aluno : alunosOrdenados) {
                        Object[] rowData = {
                            aluno.getMatricula(),
                            aluno.getNome(),
                            aluno.getTurno(),
                            aluno.getPeriodo(),
                            aluno.getEnfase(),
                            aluno.getCurso()
                        };
                        modeloTabela.addRow(rowData);
                    }
                    alunosOrdenados.removeAll(listaAlunos);

                    arvoreAlunos = null; 
                }
                case "Decrescente - nome" -> {

                    ArvoreBinaria arvoreAlunos = new ArvoreBinaria();

                    for (Alunos aluno : listaAlunos) {
                        try {
                            arvoreAlunos.incluir(aluno.getNome(), aluno); 
                        } catch (Exception e) {
                             JOptionPane.showMessageDialog(this, "Erro ao incluir aluno: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    //obtenho uma list, com os alunos ordenados em ordem decrescente com chave NOME
                    alunosOrdenados = arvoreAlunos.obterAlunosOrdemDecrescente(arvoreAlunos.getRaiz());


                    modeloTabela.setRowCount(0); 

                    for (Alunos aluno : alunosOrdenados) {
                        Object[] rowData = {
                            aluno.getMatricula(),
                            aluno.getNome(),
                            aluno.getTurno(),
                            aluno.getPeriodo(),
                            aluno.getEnfase(),
                            aluno.getCurso()
                        };
                        modeloTabela.addRow(rowData);
                    }
                    alunosOrdenados.removeAll(listaAlunos);

                    arvoreAlunos = null; //coletor de lixo vai mandar embora
                }
                case "Crescente - matricula" -> {

                    ArvoreBinaria arvoreAlunos = new ArvoreBinaria();

                    for (Alunos aluno : listaAlunos) {
                        try {
                            arvoreAlunos.incluir(aluno.getMatricula(), aluno); 
                        } catch (Exception e) {
                             JOptionPane.showMessageDialog(this, "Erro ao incluir aluno: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    //obtenho uma list, com os alunos ordenados em ordem crescente com chave matricula
                    alunosOrdenados = arvoreAlunos.obterAlunosOrdemCrescente(arvoreAlunos.getRaiz());


                    modeloTabela.setRowCount(0); 

                    for (Alunos aluno : alunosOrdenados) {
                        Object[] rowData = {
                            aluno.getMatricula(),
                            aluno.getNome(),
                            aluno.getTurno(),
                            aluno.getPeriodo(),
                            aluno.getEnfase(),
                            aluno.getCurso()
                        };
                        modeloTabela.addRow(rowData);
                    }
                    alunosOrdenados.removeAll(listaAlunos);

                    arvoreAlunos = null; //coletor de lixo vai mandar embora
                }
                case "Decrescente - matricula" -> {

                    ArvoreBinaria arvoreAlunos = new ArvoreBinaria();

                    for (Alunos aluno : listaAlunos) {
                        try {
                            arvoreAlunos.incluir(aluno.getMatricula(), aluno); 
                        } catch (Exception e) {
                             JOptionPane.showMessageDialog(this, "Erro ao incluir aluno: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    //obtenho uma list, com os alunos ordenados em ordem decrescente com chave matricula
                    alunosOrdenados = arvoreAlunos.obterAlunosOrdemDecrescente(arvoreAlunos.getRaiz());


                    modeloTabela.setRowCount(0); 

                    for (Alunos aluno : alunosOrdenados) {
                        Object[] rowData = {
                            aluno.getMatricula(),
                            aluno.getNome(),
                            aluno.getTurno(),
                            aluno.getPeriodo(),
                            aluno.getEnfase(),
                            aluno.getCurso()
                        };
                        modeloTabela.addRow(rowData);
                    }
                    alunosOrdenados.removeAll(listaAlunos);

                    arvoreAlunos = null; //coletor de lixo vai mandar embora
                }
            }
        } catch (IllegalStateException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonListarActionPerformed

    private void jButtonIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIncluirActionPerformed
            // TODO add your handling code here:
        try {
            
            if(listaAlunos == null){
                throw new IllegalStateException("LISTA NÃO FOI CARREGADA!"); // Lança uma exceção
            }    
            TelaIncluir tela = new TelaIncluir();
            tela.setListaAlunos(listaAlunos);
            tela.setVisible(true);

            listaAlunos = tela.getListaAlunos();
            
        } catch (IllegalStateException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonIncluirActionPerformed

    private void jButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarActionPerformed
        // TODO add your handling code here:
        try {
            
            if(listaAlunos == null){
                throw new IllegalStateException("LISTA NÃO FOI CARREGADA!"); // Lança uma exceção
            }    
            TelaBuscar tela = new TelaBuscar();
            tela.setListaAlunos(listaAlunos);
            tela.setVisible(true);

            listaAlunos = tela.getListaAlunos();
            
        } catch (IllegalStateException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButtonBuscarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonBuscar;
    private javax.swing.JButton jButtonIncluir;
    private javax.swing.JButton jButtonListar;
    private javax.swing.JComboBox<String> jComboBoxListar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableAlunos;
    // End of variables declaration//GEN-END:variables
}
